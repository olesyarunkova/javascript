function operation(a,b,o){ // a и b числа, между которыми выполняется операция
    switch (o){ // операторы
        case "+":
            return a+b; // возвращает сумму двух чисел
        case "-":
            return a-b; // возвращает разность двух чисел
        case "*":
            return a*b; // возвращает произведение двух чисел
        case "/":
            return a/b; // возвращает результат деления двух чисел
        case "^":
            return a**b; // возведение числа a в число b
    }
}

let strInput = process.argv[2].split(/([+\-*\/^)(])/).filter(function (f){return f!==""});
/*
process.argv[2] — это ввод строки из командной строки (например, "3+4*2/(1-5)^2").
Метод split(/([+\-*\/^)(])/):
  - Разбивает строку на массив токенов, включая числа, операторы (+, -, *, /, ^) и скобки.
  - Операторы и скобки сохраняются в массиве благодаря круглым скобкам в регулярном выражении.
Метод filter(function (f) { return f !== ""; }):
  - Удаляет пустые строки, которые могут появляться при разбиении.
*/

// Преобразование в обратную польскую нотацию
let stack =[]; // стек для хранения операторов
let out = []; // массив для записи результата (выражения в ОПН)
let priority = {"(": 0, "+": 1, "-": 1, "*": 2, "/": 2,"^":3};// приоритеты операторов
for (let i = 0; i < strInput.length; i++){
    if (!isNaN(strInput[i])) 
		// если токен - число, то добавляем его в out
        out.push(strInput[i]);
	
    else if (strInput[i]!==")"){ 
	 // Если токен — оператор:
     // Сравниваем его приоритет с приоритетом оператора на вершине стека
        while(priority[strInput[i]]<=priority[stack[stack.length-1]] && stack.length>0 && strInput[i]!=="(")
			// Если текущий оператор имеет меньший или равный приоритет,
            // извлекаем верхний оператор из стека в out
            out.push(stack.pop()); 
        stack.push(strInput[i]); 
    }
    else{
		// Если токен — закрывающая скобка ")", извлекаем операторы из стека в out,
        // пока не встретим открытую скобку "("
         while(stack[stack.length-1]!=="(")
            out.push(stack.pop());
		// Удаляем открытую скобку из стека
        stack.pop();
    }
	// Когда все токены обработаны, извлекаем оставшиеся операторы из стека в out
    if (i === strInput.length-1){
        while(stack.length)
            out.push(stack.pop());
    }
}
console.log(out.join(" "));
// Вычисление выражения Обратной Польской нотации
for (let i = 0; i<out.length; i++){ // перебираем элементы массива out
    if(isNaN(out[i])){ 
	// Если элемент — оператор:
    // Выполняем операцию с двумя предыдущими числами
        out[i] = operation(Number(out[i-2]),Number(out[i-1]),out[i]); 
		// Удаляем два предыдущих числа из массива
        out.splice(i-2,2); 
		// Откатываем индекс на два шага назад,
        // так как массив сократился на два элемента
        i-=2; 
    }
}

console.log(out[0]); // вывод результата вычислений